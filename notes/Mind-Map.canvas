{
	"nodes":[
		{"type":"file","file":"Notes/Chat App (Rust).md","id":"c21cd2a7af5cb145","x":-400,"y":-733,"width":400,"height":400,"color":"4"},
		{"type":"file","file":"Notes/Tokio - Tasks.md","id":"6d6bc1d13b9c054e","x":1520,"y":-480,"width":400,"height":400,"color":"1"},
		{"type":"file","file":"Notes/Tokio - TCP.md","id":"31203d7ae104537f","x":1520,"y":-960,"width":400,"height":400,"color":"1"},
		{"type":"file","file":"Notes/Std IO Prelude.md","id":"35dcb3d342e4b442","x":1520,"y":-1560,"width":400,"height":400,"color":"1"},
		{"type":"file","file":"Notes/Http - Keep Alive Header.md","id":"6d3f05857bc3dcd2","x":392,"y":-1507,"width":544,"height":547,"color":"6"},
		{"type":"file","file":"Notes/TCP Socket - HTTP Handling.md","id":"d85fd7603c585a81","x":376,"y":-760,"width":560,"height":480,"color":"6"},
		{"type":"file","file":"Notes/HTTP - Optimization.md","id":"e40ab55dc6a190ea","x":-1240,"y":-1280,"width":400,"height":400,"color":"2"},
		{"type":"file","file":"Notes/Handle HTTP Response.md","id":"29757122e4e265c9","x":-1240,"y":-760,"width":400,"height":383,"color":"2"},
		{"type":"file","file":"Notes/Compression Optimization.md","id":"100b02e0880ee518","x":-1240,"y":-240,"width":400,"height":400,"color":"2"},
		{"type":"file","file":"Notes/SSL.md","id":"307cb7962f252cc4","x":376,"y":-87,"width":560,"height":495,"color":"6"},
		{"type":"file","file":"Notes/Trust Certificate in Windows.md","id":"ed95a47c43094e53","x":1480,"y":179,"width":400,"height":400,"color":"1"},
		{"type":"file","file":"Notes/HTTP - TLS Handshake Optimization.md","id":"6513a2185994a057","x":-1240,"y":360,"width":400,"height":400,"color":"2"},
		{"id":"94bf8a4841af530e","x":-720,"y":560,"width":400,"height":307,"color":"1","type":"text","text":"Need to figure out how to implement session resumption using Rustls & Tokio_Rustls:\n\nProgress so far:\n```git\ndiff --git a/src/ssl/constants.rs b/src/ssl/constants.rs\nindex 936f9b7..0190553 100644\n--- a/src/ssl/constants.rs\n+++ b/src/ssl/constants.rs\n@@ -1,2 +1,4 @@\n pub const PRIVATE_KEY_FILE_PATH: &'static str = \"certs/private_key.pem\"; \n-pub const CERTIFICATE_FILE_PATH: &'static str = \"certs/certificate.pem\"; \n\\ No newline at end of file\n+pub const CERTIFICATE_FILE_PATH: &'static str = \"certs/certificate.pem\"; \n+\n+pub const SERVER_SESSION_CACHE_SIZE: usize = 256;\n\\ No newline at end of file\ndiff --git a/src/ssl/mod.rs b/src/ssl/mod.rs\nindex 132bd52..29d1f7a 100644\n--- a/src/ssl/mod.rs\n+++ b/src/ssl/mod.rs\n@@ -1,14 +1,24 @@\n mod constants;\n \n-use self::constants::{CERTIFICATE_FILE_PATH, PRIVATE_KEY_FILE_PATH};\n+use self::constants::*;\n \n-use rustls::{Certificate, PrivateKey};\n+use rustls::{\n+    server::ServerSessionMemoryCache, Certificate, PrivateKey, ServerConfig, ServerConnection,\n+};\n use rustls_pemfile;\n-use std::{fs::File, io::BufReader, sync::Arc};\n+use std::{\n+    fs::File,\n+    io::BufReader,\n+    os::windows::prelude::AsSocket,\n+    rc::Rc,\n+    sync::{Arc, Mutex},\n+};\n use tokio::net::TcpStream;\n use tokio_rustls::{server::TlsStream, TlsAcceptor};\n \n pub struct SSL {\n+    config: Arc<ServerConfig>,\n+    session_cache: Arc<Mutex<Arc<ServerSessionMemoryCache>>>,\n     acceptor: TlsAcceptor,\n }\n \n@@ -17,20 +27,42 @@ impl SSL {\n         let private_key = SSL::load_private_key_from_file(PRIVATE_KEY_FILE_PATH);\n         let cert_chain = SSL::load_certs_from_prem(CERTIFICATE_FILE_PATH);\n \n-        let config = rustls::ServerConfig::builder()\n-            .with_safe_defaults()\n-            .with_no_client_auth()\n-            .with_single_cert(cert_chain, private_key)\n-            .expect(\"unable to setup tls server config\");\n+        let config = Arc::new(\n+            rustls::ServerConfig::builder()\n+                .with_safe_defaults()\n+                .with_no_client_auth()\n+                .with_single_cert(cert_chain, private_key)\n+                .expect(\"unable to setup tls server config\"),\n+        );\n+\n+        let session_cache = ServerSessionMemoryCache::new(SERVER_SESSION_CACHE_SIZE);\n+        let acceptor = TlsAcceptor::from(Arc::clone(&config));\n \n         SSL {\n-            acceptor: TlsAcceptor::from(Arc::new(config)),\n+            config,\n+            session_cache: Arc::new(Mutex::new(session_cache)),\n+            acceptor,\n         }\n     }\n \n     pub async fn get_tls_stream(&self, stream: TcpStream) -> TlsStream<TcpStream> {\n-        match self.acceptor.accept(stream).await {\n-            Ok(tls_stream) => tls_stream,\n+        match self\n+            .acceptor\n+            .accept(stream)\n+            .await\n+        {\n+            Ok(mut tls_stream) => {\n+                let (socket, connection) = tls_stream.get_mut();\n+\n+                if !connection.received_resumption_data().is_none() {\n+                    return tls_stream;\n+                }\n+\n+                connection.complete_io(socket);\n+                connection\n+\n+                tls_stream\n+            },\n             Err(error) => {\n                 panic!(\"failed to convert to tls stream {:.2?}\", error);\n             }\n@@ -63,6 +95,8 @@ impl SSL {\n impl Clone for SSL {\n     fn clone(&self) -> Self {\n         SSL {\n+            config: self.config.clone(),\n+            session_cache: self.session_cache.clone(),\n             acceptor: self.acceptor.clone(),\n         }\n     }\n```"}
	],
	"edges":[
		{"id":"cdb3fd208cf79ea5","fromNode":"c21cd2a7af5cb145","fromSide":"right","toNode":"d85fd7603c585a81","toSide":"left"},
		{"id":"c9c39df8179864e8","fromNode":"d85fd7603c585a81","fromSide":"right","toNode":"35dcb3d342e4b442","toSide":"left"},
		{"id":"fcc887498c53a5c8","fromNode":"d85fd7603c585a81","fromSide":"right","toNode":"31203d7ae104537f","toSide":"left"},
		{"id":"c6b62c7c400a884f","fromNode":"d85fd7603c585a81","fromSide":"right","toNode":"6d6bc1d13b9c054e","toSide":"left"},
		{"id":"418584150165d7da","fromNode":"c21cd2a7af5cb145","fromSide":"left","toNode":"e40ab55dc6a190ea","toSide":"right"},
		{"id":"39237c4192c7387a","fromNode":"e40ab55dc6a190ea","fromSide":"right","toNode":"6d3f05857bc3dcd2","toSide":"left"},
		{"id":"1b2c828e686b0f9b","fromNode":"c21cd2a7af5cb145","fromSide":"left","toNode":"29757122e4e265c9","toSide":"right"},
		{"id":"f55bd69a6c660533","fromNode":"c21cd2a7af5cb145","fromSide":"left","toNode":"100b02e0880ee518","toSide":"right"},
		{"id":"64cb4734a874908f","fromNode":"c21cd2a7af5cb145","fromSide":"right","toNode":"307cb7962f252cc4","toSide":"left"},
		{"id":"1d362ea58ca6ec78","fromNode":"307cb7962f252cc4","fromSide":"right","toNode":"ed95a47c43094e53","toSide":"left"},
		{"id":"fa4de9dbe444b4ce","fromNode":"c21cd2a7af5cb145","fromSide":"left","toNode":"6513a2185994a057","toSide":"right"},
		{"id":"d5c4862711fe9b4b","fromNode":"6513a2185994a057","fromSide":"right","toNode":"94bf8a4841af530e","toSide":"left"}
	]
}